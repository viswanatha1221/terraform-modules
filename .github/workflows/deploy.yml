name: Terraform CI CD Pipeline for Deploying AWS Resources
run-name: ${{ github.actor }} has triggered the pipeline

on: 
    
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform_Action'
        default: ''
        type: choice
        options:
           - ''
           - plan
           - apply
           - destroy
           
      TF_LOG:
        description: 'Terraform log level'
        required: true
        default: 'ERROR'
        type: choice
        options:
          - TRACE
          - DEBUG
          - INFO
          - ERROR

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_LOG: ${{ github.event.inputs.tf_log_level }}
  working-directory: ./tf_modules
  
jobs:
  build-infra:
    name: terraform-ci-cd
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
    - name: Terraform Fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ${{ env.working-directory }}
    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ${{ env.working-directory }}
    - name: Terraform Plan 
      id: plan
      run: terraform plan -out=tfplan -no-color
      working-directory: ${{ env.working-directory }}
    - name: Plan output
      id: output
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            ### Workspace
 
            \`${process.env.TF_WORKSPACE}\`
 
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
 
            \`\`\`hcl
            ${process.env.PLAN}
            \`\`\`
 
            </details>
 
            **Pusher**: @${{ github.actor }}
            **Action**: ${{ github.event_name }}
            `;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && github.event.inputs.terraform_action == 'apply'
      run: terraform apply -auto-approve -input=false -no-color tfplan
      working-directory: ${{ env.working-directory }}

    - name: Terraform destroy
      id: destroy
      if: github.ref == 'refs/heads/main' && github.event.inputs.terraform_action == 'destroy'
      run: terraform destroy --auto-approve
      working-directory: ${{ env.working-directory }}
